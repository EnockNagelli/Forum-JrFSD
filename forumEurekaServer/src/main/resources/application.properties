# forumEurekaServer
server.port=8761

# Registering a Secure Application to be contacted over HTTPS
eureka.instance.securePortEnabled=true

# An application registered with Eureka is known as Eureka instance. 
# Every Eureka instance is also a Eureka Client as it can fetch the details of other Eureka instances also. 
#... register-with-eureka to false so that it doesn't try to register itself with itself as the Eureka server also has a built-in Eureka client.
eureka.client.fetch-registry=false
eureka.client.register-with-eureka=false

# When the registry starts, it will complain (with a stacktrace) that there are no replica nodes to which 
# the registry can connect. In a production environment, you will want more than one instance of the registry. 
# For our simple purposes, however, it suffices to disable the relevant logging.
# By default, the registry also tries to register itself, so you need to disable that behavior as well.
# It is a good convention to put this registry on a separate port when using it locally.
logging.level.com.netflix.eureka=OFF
logging.level.com.netflix.discovery=OFF

#management.security.enabled = false

#eureka.client.fetchRegistry=false
#eureka.client.registerWithEureka=false










#-------------------------------------------------------------------------------------------------------------
# Registering a Secure Application
# If your app wants to be contacted over HTTPS, you can set two flags in the 'EurekaInstanceConfig':
#	1. eureka.instance.[nonSecurePortEnabled]=[false]
#	2. eureka.instance.[securePortEnabled]=[true]

# Doing so makes Eureka publish instance information that shows an explicit preference for secure 
# communication. The Spring Cloud DiscoveryClient always returns a URI starting with https for a service 
# configured this way.